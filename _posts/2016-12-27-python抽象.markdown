---
layout:       post
title:        "python的抽象"
date:         2016-12-27 12:00:00
categories: python
tag: document
---

### 定义：
### 递归有两个经典：阶乘和幂
1. n的阶乘，n*(n-1)*(n-2)……\*2\*1
```
$def factorial(n):
  result=n
  for i in range(1,n):
    result*=i
  return result
$factorial(3)
$6  
```
抽象：factorial(n)=n*factorial(n-1),另factorial(1)=1
```
$def factorial(n):
  if n==1:
    return 1
  else
    return n*factorial(n-1)
```
2. 计算一个数的幂，就像内建函数pow()函数和\*\*运算符一样。先看一个简单的例子：power(x,n)(x为n的幂次)是x自乘n-1次的结果。
```
$def pow(x,n):
  result=1
  for i in range(n):
    result*=x
  return result
$pow(3,2)
$9
```
> 补充：list((range(3))为[0,1,2];list((range(1,3))为[1,2]

抽象：pow(x,n)=x*pow(x,n-1),另pow(x,1)=x
```
def pow(x,n):
  if n==0:
    return 1
  else:
    return x*pow(x,n-1)
输入：pow(2,3)
输出：8
```
